//This package provides functions
package erratum

// Use takes a ResourceOpener function as a parameter and attempts to
// call it to obtain a resource. It resists TransientError generated by
// this call.
// It also uses this resource's Frob function, and repairs FrobErrors
// generated by it by calling its Defrob function.
func Use(o ResourceOpener, inp string) (returnedError error) {
	returnedError = nil
	resource, err := o()
	for _, isTransientError := err.(TransientError); isTransientError; _, isTransientError = err.(TransientError) {
		resource, err = o()
	}
	if err != nil {
		returnedError = err
		return
	}
	defer resource.Close()
	defer func() {
		r := recover()
		if r != nil {
			if frobError, isFrobError := r.(FrobError); isFrobError {
				resource.Defrob(frobError.defrobTag)
				returnedError = frobError.inner
			} else {
				returnedError = r.(error)
			}
		}
	}()
	resource.Frob(inp)

	return
}
